import requests
import json
import pandas as pd
import os
from datetime import datetime
import time

class MLBDataExporter:
    """Class to export MLB game data for a specific team and season."""
    
    def __init__(self, team_id, season):
        """
        Initialize the exporter with team ID and season.
        
        Args:
            team_id (int): MLB team ID (Cubs = 112)
            season (int): Season year to fetch data for
        """
        self.team_id = team_id
        self.season = season
        self.base_url = "https://statsapi.mlb.com/api"
        self.output_dir = f"{team_id}_{season}_data"
        
        # Create output directory if it doesn't exist
        if not os.path.exists(self.output_dir):
            os.makedirs(self.output_dir)
            os.makedirs(os.path.join(self.output_dir, "games"))
            os.makedirs(os.path.join(self.output_dir, "boxscores"))
    
    def get_team_schedule(self):
        """
        Fetch the full season schedule for the specified team.
        
        Returns:
            list: List of game data dictionaries
        """
        url = f"{self.base_url}/v1/schedule"
        params = {
            "teamId": self.team_id,
            "season": self.season,
            "sportId": 1,  # MLB
            "gameType": "R,F,D,L,W",  # Regular, First Round, Division Series, League Championship, World Series
            "hydrate": "team,linescore,broadcasts(all),game(content(media(featured,epg),summary)),seriesStatus,seriesSummary"
        }
        
        print(f"Fetching schedule for team ID {self.team_id} for {self.season} season...")
        response = requests.get(url, params=params)
        
        if response.status_code != 200:
            print(f"Error fetching schedule: {response.status_code}")
            return []
        
        data = response.json()
        
        # Save raw schedule data
        with open(os.path.join(self.output_dir, "schedule.json"), "w") as f:
            json.dump(data, f, indent=2)
            
        # Extract games data
        games = []
        for date in data.get("dates", []):
            for game in date.get("games", []):
                games.append(game)
        
        print(f"Found {len(games)} games for the {self.season} season")
        return games
    
    def get_game_data(self, game_id):
        """
        Fetch detailed data for a specific game.
        
        Args:
            game_id (int): MLB game ID
            
        Returns:
            dict: Game data including plays, stats, etc.
        """
        # Add a small delay to avoid hitting rate limits
        time.sleep(0.5)
        
        # Get live data (includes play-by-play)
        live_url = f"{self.base_url}/v1.1/game/{game_id}/feed/live"
        live_response = requests.get(live_url)
        
        if live_response.status_code != 200:
            print(f"Error fetching live data for game {game_id}: {live_response.status_code}")
            return None
        
        live_data = live_response.json()
        
        # Get boxscore
        boxscore_url = f"{self.base_url}/v1/game/{game_id}/boxscore"
        boxscore_response = requests.get(boxscore_url)
        
        if boxscore_response.status_code != 200:
            print(f"Error fetching boxscore for game {game_id}: {boxscore_response.status_code}")
            return None
        
        boxscore_data = boxscore_response.json()
        
        return {
            "live_data": live_data,
            "boxscore": boxscore_data
        }
    
    def export_games_data(self):
        """
        Export all games data for the team and season.
        Saves individual game files and summary CSV files.
        """
        games = self.get_team_schedule()
        
        # Create DataFrames to store summary data
        games_summary = []
        batting_stats = []
        pitching_stats = []
        
        for i, game in enumerate(games):
            game_id = game["gamePk"]
            game_date = game["officialDate"]
            status = game["status"]["detailedState"]
            
            # Skip games that haven't been played yet
            if status in ["Scheduled", "Pre-Game", "Warmup"]:
                print(f"Skipping game {game_id} on {game_date} - not played yet ({status})")
                continue
            
            print(f"Processing game {i+1}/{len(games)}: {game_id} on {game_date}")
            
            # Get detailed game data
            game_data = self.get_game_data(game_id)
            if not game_data:
                continue
            
            # Save raw game data
            with open(os.path.join(self.output_dir, "games", f"game_{game_id}.json"), "w") as f:
                json.dump(game_data["live_data"], f, indent=2)
            
            # Save boxscore data
            with open(os.path.join(self.output_dir, "boxscores", f"boxscore_{game_id}.json"), "w") as f:
                json.dump(game_data["boxscore"], f, indent=2)
            
            # Extract summary data
            try:
                # Game summary
                home_team = game["teams"]["home"]["team"]["name"]
                away_team = game["teams"]["away"]["team"]["name"]
                home_score = game["teams"]["home"].get("score", 0)
                away_score = game["teams"]["away"].get("score", 0)
                
                game_summary = {
                    "game_id": game_id,
                    "date": game_date,
                    "home_team": home_team,
                    "away_team": away_team,
                    "home_score": home_score,
                    "away_score": away_score,
                    "venue": game.get("venue", {}).get("name", ""),
                    "status": status,
                    "winning_team": home_team if home_score > away_score else away_team,
                    "losing_team": away_team if home_score > away_score else home_team
                }
                games_summary.append(game_summary)
                
                # Extract batting and pitching stats for Cubs players
                boxscore = game_data["boxscore"]
                
                # Determine if Cubs are home or away
                cubs_side = "home" if home_team == "Chicago Cubs" else "away"
                
                # Get batting stats
                for player_id, player in boxscore["teams"][cubs_side]["players"].items():
                    if "stats" in player and "batting" in player["stats"]:
                        bat_stat = {
                            "game_id": game_id,
                            "date": game_date,
                            "player_id": player_id.replace("ID", ""),
                            "name": player["person"]["fullName"],
                            "position": player.get("position", {}).get("abbreviation", ""),
                            "ab": player["stats"]["batting"].get("atBats", 0),
                            "r": player["stats"]["batting"].get("runs", 0),
                            "h": player["stats"]["batting"].get("hits", 0),
                            "rbi": player["stats"]["batting"].get("rbi", 0),
                            "bb": player["stats"]["batting"].get("baseOnBalls", 0),
                            "so": player["stats"]["batting"].get("strikeOuts", 0),
                            "avg": player["seasonStats"]["batting"].get("avg", ".000"),
                            "ops": player["seasonStats"]["batting"].get("ops", ".000"),
                        }
                        batting_stats.append(bat_stat)
                
                # Get pitching stats
                for player_id, player in boxscore["teams"][cubs_side]["players"].items():
                    if "stats" in player and "pitching" in player["stats"]:
                        pitch_stat = {
                            "game_id": game_id,
                            "date": game_date,
                            "player_id": player_id.replace("ID", ""),
                            "name": player["person"]["fullName"],
                            "ip": player["stats"]["pitching"].get("inningsPitched", "0"),
                            "h": player["stats"]["pitching"].get("hits", 0),
                            "r": player["stats"]["pitching"].get("runs", 0),
                            "er": player["stats"]["pitching"].get("earnedRuns", 0),
                            "bb": player["stats"]["pitching"].get("baseOnBalls", 0),
                            "so": player["stats"]["pitching"].get("strikeOuts", 0),
                            "hr": player["stats"]["pitching"].get("homeRuns", 0),
                            "era": player["seasonStats"]["pitching"].get("era", "0.00"),
                            "whip": player["seasonStats"]["pitching"].get("whip", "0.00"),
                        }
                        pitching_stats.append(pitch_stat)
                        
            except Exception as e:
                print(f"Error processing game {game_id}: {str(e)}")
        
        # Convert to DataFrames and save as CSV
        if games_summary:
            games_df = pd.DataFrame(games_summary)
            games_df.to_csv(os.path.join(self.output_dir, "games_summary.csv"), index=False)
            
        if batting_stats:
            batting_df = pd.DataFrame(batting_stats)
            batting_df.to_csv(os.path.join(self.output_dir, "batting_stats.csv"), index=False)
            
        if pitching_stats:
            pitching_df = pd.DataFrame(pitching_stats)
            pitching_df.to_csv(os.path.join(self.output_dir, "pitching_stats.csv"), index=False)
        
        # Create summary report
        if games_summary:
            wins = sum(1 for game in games_summary if 
                       (game["home_team"] == "Chicago Cubs" and game["home_score"] > game["away_score"]) or
                       (game["away_team"] == "Chicago Cubs" and game["away_score"] > game["home_score"]))
            
            losses = sum(1 for game in games_summary if 
                         (game["home_team"] == "Chicago Cubs" and game["home_score"] < game["away_score"]) or
                         (game["away_team"] == "Chicago Cubs" and game["away_score"] < game["home_score"]))
            
            print(f"\nExport complete! Summary:")
            print(f"Team: Chicago Cubs (ID: {self.team_id})")
            print(f"Season: {self.season}")
            print(f"Games processed: {len(games_summary)}")
            print(f"Current record: {wins}-{losses}")
            print(f"Data saved to: {self.output_dir}/")
            
            # Create a README file with instructions
            with open(os.path.join(self.output_dir, "README.md"), "w") as f:
                f.write(f"# Chicago Cubs {self.season} Season Data\n\n")
                f.write(f"Data exported on {datetime.now().strftime('%Y-%m-%d')}\n\n")
                f.write(f"## Summary\n")
                f.write(f"- Team: Chicago Cubs (ID: {self.team_id})\n")
                f.write(f"- Season: {self.season}\n")
                f.write(f"- Games processed: {len(games_summary)}\n")
                f.write(f"- Current record: {wins}-{losses}\n\n")
                f.write(f"## Files\n")
                f.write(f"- `schedule.json`: Raw schedule data\n")
                f.write(f"- `games_summary.csv`: Summary of all games\n")
                f.write(f"- `batting_stats.csv`: Batting statistics for Cubs players\n")
                f.write(f"- `pitching_stats.csv`: Pitching statistics for Cubs players\n")
                f.write(f"- `games/`: Directory containing raw game data JSON files\n")
                f.write(f"- `boxscores/`: Directory containing boxscore JSON files\n")


if __name__ == "__main__":
    # Team ID for Chicago Cubs is 112
    exporter = MLBDataExporter(team_id=112, season=2024)
    exporter.export_games_data()
